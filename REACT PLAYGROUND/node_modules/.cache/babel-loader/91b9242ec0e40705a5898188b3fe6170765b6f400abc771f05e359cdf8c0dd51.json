{"ast":null,"code":"var _jsxFileName = \"/Users/logannitzsche/Documents/GitHub/SpellCheckWeb/spell-checker/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport InputSection from \"./components/InputSection\";\nimport SuggestionsList from \"./components/SuggestionsList\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const [inputWord, setInputWord] = useState(\"\");\n  useEffect(() => {\n    const currentYear = new Date().getFullYear();\n    document.getElementById(\"currentYear\").textContent = currentYear;\n  }, []);\n  const handleCheck = () => {\n    if (inputWord.trim() === \"\") return;\n\n    // Simulate spell-check logic here (use your logic from before)\n    const newSuggestions = spellCheck(inputWord.toLowerCase());\n    setSuggestions(newSuggestions);\n  };\n  const spellCheck = userInput => {\n    // Simulate a spell-check function or integrate an actual dictionary.\n    return [`${userInput}y`, `${userInput}ly`, `${userInput}able`, `${userInput}ness`, `${userInput}ing`, `${userInput}ed`, `${userInput}ish`];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputSection, {\n      inputWord: inputWord,\n      setInputWord: setInputWord,\n      onCheck: handleCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SuggestionsList, {\n      suggestions: suggestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"bqSPgoldLWJ1kgj1tZVNnKzy6VE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","InputSection","SuggestionsList","Footer","jsxDEV","_jsxDEV","App","_s","suggestions","setSuggestions","inputWord","setInputWord","currentYear","Date","getFullYear","document","getElementById","textContent","handleCheck","trim","newSuggestions","spellCheck","toLowerCase","userInput","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCheck","_c","$RefreshReg$"],"sources":["/Users/logannitzsche/Documents/GitHub/SpellCheckWeb/spell-checker/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Header from \"./components/Header\";\nimport InputSection from \"./components/InputSection\";\nimport SuggestionsList from \"./components/SuggestionsList\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [suggestions, setSuggestions] = useState([]);\n  const [inputWord, setInputWord] = useState(\"\");\n\n  useEffect(() => {\n    const currentYear = new Date().getFullYear();\n    document.getElementById(\"currentYear\").textContent = currentYear;\n  }, []);\n\n  const handleCheck = () => {\n    if (inputWord.trim() === \"\") return;\n\n    // Simulate spell-check logic here (use your logic from before)\n    const newSuggestions = spellCheck(inputWord.toLowerCase());\n    setSuggestions(newSuggestions);\n  };\n\n  const spellCheck = (userInput) => {\n    // Simulate a spell-check function or integrate an actual dictionary.\n    return [\n      `${userInput}y`,\n      `${userInput}ly`,\n      `${userInput}able`,\n      `${userInput}ness`,\n      `${userInput}ing`,\n      `${userInput}ed`,\n      `${userInput}ish`,\n    ];\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <InputSection\n        inputWord={inputWord}\n        setInputWord={setInputWord}\n        onCheck={handleCheck}\n      />\n      <SuggestionsList suggestions={suggestions} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMa,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC5CC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACC,WAAW,GAAGL,WAAW;EAClE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIR,SAAS,CAACS,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;;IAE7B;IACA,MAAMC,cAAc,GAAGC,UAAU,CAACX,SAAS,CAACY,WAAW,CAAC,CAAC,CAAC;IAC1Db,cAAc,CAACW,cAAc,CAAC;EAChC,CAAC;EAED,MAAMC,UAAU,GAAIE,SAAS,IAAK;IAChC;IACA,OAAO,CACL,GAAGA,SAAS,GAAG,EACf,GAAGA,SAAS,IAAI,EAChB,GAAGA,SAAS,MAAM,EAClB,GAAGA,SAAS,MAAM,EAClB,GAAGA,SAAS,KAAK,EACjB,GAAGA,SAAS,IAAI,EAChB,GAAGA,SAAS,KAAK,CAClB;EACH,CAAC;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpB,OAAA,CAACL,MAAM;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVxB,OAAA,CAACJ,YAAY;MACXS,SAAS,EAAEA,SAAU;MACrBC,YAAY,EAAEA,YAAa;MAC3BmB,OAAO,EAAEZ;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACFxB,OAAA,CAACH,eAAe;MAACM,WAAW,EAAEA;IAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7CxB,OAAA,CAACF,MAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACtB,EAAA,CA1CID,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA4CT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}